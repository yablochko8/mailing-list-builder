// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sender {
  id        Int       @id @default(autoincrement())
  clerkId   String    @unique
  name      String    
  email     String    @unique

  // one-to-many relations
  lists     MailingList[]
  blasts    Blast[]

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("sender")
}

model MailingList {
  id        Int       @id @default(autoincrement())
  name      String    @unique

  // many-to-one relation: MailingList-to-Sender
  senderId Int
  sender   Sender @relation(fields: [senderId], references: [id])

  // many-to-many relations
  recipients    RecipientsOnMailingLists[]
  blasts        BlastsToMailingLists[]

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("list")
}

model Recipient {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  email     String

  // one-to-many relations
  messages  Message[]

  // many-to-many relations
  lists     RecipientsOnMailingLists[]

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("recipient")
}




model Message {
  id          Int       @id @default(autoincrement())
  content     String
  delivered   Boolean
  sentDate    DateTime
  status      String // Should probably be an enum

  // many-to-one relation: Message-to-Blast
  blastId     Int
  blast       Blast     @relation(fields: [blastId], references: [id])

  // many-to-one relation: Message-to-Recipient
  recipientId Int
  recipient   Recipient @relation(fields: [recipientId], references: [id])

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("message")
}

model Blast {
  id            Int       @id @default(autoincrement())
  name          String
  status        String

  // one-to-many relations
  messagesSent  Message[]

  // many-to-one relation: Blast-to-Sender
  senderId      Int
  sender        Sender    @relation(fields: [senderId], references: [id])

  // many-to-many relations
  targetLists   BlastsToMailingLists[]

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("blast")
}
model RecipientsOnMailingLists {
  recipient     Recipient     @relation(fields: [recipientId], references: [id])
  recipientId   Int // relation scalar field (used in the `@relation` attribute above)
  mailingList   MailingList   @relation(fields: [mailingListId], references: [id])
  mailingListId Int // relation scalar field (used in the `@relation` attribute above)

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // make these entries identifiable
  @@id([recipientId, mailingListId])
}



model BlastsToMailingLists {
  blast             Blast     @relation(fields: [blastId], references: [id])
  blastId           Int // relation scalar field (used in the `@relation` attribute above)
  mailingList       MailingList   @relation(fields: [mailingListId], references: [id])
  mailingListId     Int // relation scalar field (used in the `@relation` attribute above)

  // standard
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // make these entries identifiable
  @@id([blastId, mailingListId])
}




