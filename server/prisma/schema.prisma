// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sender {
  id            Int       @id @default(autoincrement())
  clerkId       String    @unique
  name          String    
  email         String    @unique

  // one-to-many relations
  lists         List[]
  blasts        Blast[]

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  @@map("sender")
}


model Recipient {
  id            Int       @id @default(autoincrement())
  name          String
  email         String

  // one-to-many relations
  messages      Message[]

  // many-to-many relations
  lists         RecipientsOnLists[]

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  @@map("recipient")
}



model List {
  id            Int       @id @default(autoincrement())
  name          String    @unique

  // many-to-one relation: List-to-Sender
  senderId      Int
  sender        Sender    @relation(fields: [senderId], references: [id])

  // many-to-many relations
  recipients    RecipientsOnLists[]
  blasts        ListsInBlast[]

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  @@map("list")
}


enum BlastStatus {
  draft
  ongoing
  completed
  failed
}
model Blast {
  id            Int       @id @default(autoincrement())
  name          String
  status        BlastStatus @default(draft)

  // one-to-many relations
  messages      Message[]

  // many-to-one relation: Blast-to-Sender
  senderId      Int
  sender        Sender    @relation(fields: [senderId], references: [id])

  // many-to-many relations
  targetLists   ListsInBlast[]

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  @@map("blast")
}

enum MessageStatus {
  draft
  queued
  sentWithSuccess
  sentButFailed
}
model Message {
  id            Int       @id @default(autoincrement())
  content       String
  status        MessageStatus @default(draft)
  sentAt        DateTime?

  // many-to-one relation: Message-to-Blast
  blastId       Int
  blast         Blast     @relation(fields: [blastId], references: [id])

  // many-to-one relation: Message-to-Recipient
  recipientId   Int
  recipient     Recipient @relation(fields: [recipientId], references: [id])

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  @@map("message")
}

model RecipientsOnLists {
  recipient     Recipient     @relation(fields: [recipientId], references: [id])
  recipientId   Int // relation scalar field (used in the `@relation` attribute above)
  list          List   @relation(fields: [listId], references: [id])
  listId        Int // relation scalar field (used in the `@relation` attribute above)

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  // make these entries identifiable
  @@id([recipientId, listId])
}


model ListsInBlast {
  blast         Blast     @relation(fields: [blastId], references: [id])
  blastId       Int // relation scalar field (used in the `@relation` attribute above)
  list          List   @relation(fields: [listId], references: [id])
  listId        Int // relation scalar field (used in the `@relation` attribute above)

  // standard
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  version       Int       @default(1)

  // make these entries identifiable
  @@id([blastId, listId])
	@@map("BlastsToLists")
}




